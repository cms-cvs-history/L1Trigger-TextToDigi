# Description:
#  test rct sequence: digi -> source -> digi
#  check consistency of input and output rct digi collections

process RCTdigi2digi = {
    
    untracked PSet maxEvents = { untracked int32 input = 10 }

    source = PoolSource {
	untracked vstring fileNames = 	
	{'rfio:/castor/cern.ch/user/n/nuno/l1emul/single_e_L1CaloEmul.root'}
    }
    
    service = MessageLogger {
	untracked PSet detailedInfo.txt = { 
	    untracked string threshold = "DEBUG" } 
	untracked vstring debugModules = 
	{"rctDigiToRctText", "rctDigiToRctText"}
    }
    
    # digi->txt
    include "L1Trigger/TextToDigi/data/RctDigiToRctText.cfi"
    replace rctDigiToRctText.RctInputLabel = L1RCTRegionSumsEmCands
    replace rctDigiToRctText.TextFileName  = "data_mc/testMC_"

    # txt->digi
    include "L1Trigger/TextToDigi/data/RctTextToRctDigi.cfi"
    replace rctTextToRctDigi.TextFileName = "data_mc/testMC_"

    # compare
    include "L1Trigger/HardwareValidation/data/L1Comparator.cfi"
    replace l1Compare.RCT_dataLabel = rctTextToRctDigi
    replace l1Compare.RCT_emulLabel = L1RCTRegionSumsEmCands
    replace l1Compare.DumpFile      = "dump_rct_d2d.txt"
    replace l1Compare.DumpMode      = 1
    replace l1Compare.COMPARE_COLLS = { 0,0,1,0,0,0,0,0,0,0,0,0 }

    path p ={rctDigiToRctText, rctTextToRctDigi, l1Compare}
    
    module outputEvents = PoolOutputModule {
    	untracked string fileName = "testRctDigi2Digi.root"
    	untracked vstring outputCommands = {"keep *"}
    }
    
    endpath outpath = {outputEvents}

}

